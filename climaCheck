

// global variables that are used to update names & values in map functions
var qa_name = "BRDF_Albedo_Band_Mandatory_Quality_Band1";
var band_name = "Albedo_BSA_Band1";
var a = 0.001; // set to 1 if no scaling needed
var qa_snow_name = "NDSI_Snow_Cover_Basic_QA";
var snow_name = "NDSI";
var snow_t = 0;


// load the domain as global varible since it's used extensively 
var domainShapeFile = 'projects/gee-project-sylvia/assets/test_domain';
var domain = ee.FeatureCollection(domainShapeFile);


// really bad function that updates the band names because the google earth engine map function won't allow
// me to update the band names within the mapping functions.... so we do some sketchy things instead
function bandNameUpdate(qaBand,normalBand)
{
  qa_name = qaBand;
  band_name = normalBand;
}


// updates the scaling factor if needed
function scalingFactorUpdate(scale)
{
  a = scale;
}

// scales images .. note that you should update the scaling factor before using this
function scaler(image){
  return image.multiply(a);
}
// bitwise extraction function in ee from https://spatialthoughts.com/2021/08/19/qa-bands-bitmasks-gee/
var bitwiseExtract = function(input, fromBit, toBit) {
  var maskSize = ee.Number(1).add(toBit).subtract(fromBit);
  var mask = ee.Number(1).leftShift(maskSize).subtract(1);
  return input.rightShift(fromBit).bitwiseAnd(mask);
};


// QA function that only works on band1 from both of these datasets other sats will require other QA functions
function qa(image){
  var qaBand = image.select(qa_name);
  var qaMask = bitwiseExtract(qaBand, 0, 1).eq(0);
  var band = image.select(band_name).updateMask(qaMask).rename('qa_'+band_name);
  return image.addBands(band);
}

//QA function for snow data masks for ocean,night and ok data
function qaSnow(image){
  var qaMask = image.expression(
    // includes good,best and ok data
    '(QA == 0) || (QA == 1)|| (QA == 2)', {
      'QA': image.select(qa_snow_name),
    });

  var band = image.select(snow_name).updateMask(qaMask).rename('qa_'+band_name);
  return band;
  
  
}

function snowmasking(image){
  var valueMask = image.expression(
    'thres < value',{
      'thres':image.select(snow_name),
      'value':snow_t
      
    })
    return valueMask.rename('snow mask')
}



function waterMasking(){
  var landuse = ee.ImageCollection('MODIS/061/MCD12Q1').first();
  var valueMask = landuse.expression(
    'thres != value',{
      'thres':landuse.select('LC_Type1'),
      'value':17
      });
  return valueMask.rename('land mask');
}


// function that calls a collection using imageCollectionLoc, filters based on start
// and end dates as well as the shapefile input
// then masks the image collection to that shapefile
var CollectionFilter = function(imageCollectionLoc,filteringShape,startDate,EndDate)
{
  var imageGroup = ee.ImageCollection(imageCollectionLoc);
  var filtered = imageGroup.filter(ee.Filter.date(startDate,EndDate)).filter(ee.Filter.bounds(filteringShape));
  var masked = filtered.map(function(image){return image.clip(domain)});  
  return masked;
  //return filtered
};



// pulls all the functions into a single thing that is callible
function helperFunction(collection,filtering,start,end,qaBand,band,scale){
  var filtered_collection = CollectionFilter(collection,filtering,start,end);
  bandNameUpdate(qaBand,band);
  scalingFactorUpdate(scale);
  var qaedCollection = filtered_collection.map(qa);
  var scaled_collection = qaedCollection.map(scaler);
  return scaled_collection.select('qa_'+band);
  
}
function SnowHelperFunction(collection,filtering,start,end,qaBand,band,scale){
  var filtered_collection = CollectionFilter(collection,filtering,start,end);
  //bandNameUpdate(qaBand,band);
 // scalingFactorUpdate(scale);
  //var qaedCollection = filtered_collection.map(qaSnow);
  var snowmask = filtered_collection.map(snowmasking);
  return snowmask;
  
}




// testing the functions on the two datasets
var omega_late = helperFunction("MODIS/061/MCD43A3",domain,
"2015-02-24","2020-02-24","BRDF_Albedo_Band_Mandatory_Quality_Band1","Albedo_BSA_Band1",0.001);
var f_iso_late= helperFunction("MODIS/061/MCD43A1",domain,
"2015-02-24","2020-02-24","BRDF_Albedo_Band_Mandatory_Quality_Band1","BRDF_Albedo_Parameters_Band1_iso",0.001)
var snow_late =  SnowHelperFunction("MODIS/MCD43A4_006_NDSI",domain,
"2015-02-24","2020-02-24","NDSI_Snow_Cover_Basic_QA","NDSI",1);

var omega_early = helperFunction("MODIS/061/MCD43A3",domain,
"2000-02-24","2005-02-24","BRDF_Albedo_Band_Mandatory_Quality_Band1","Albedo_BSA_Band1",0.001);
var f_iso_early= helperFunction("MODIS/061/MCD43A1",domain,
"2000-02-24","2005-02-24","BRDF_Albedo_Band_Mandatory_Quality_Band1","BRDF_Albedo_Parameters_Band1_iso",0.001)
var snow_early =  SnowHelperFunction("MODIS/MCD43A4_006_NDSI",domain,
"2000-02-24","2005-02-24","NDSI_Snow_Cover_Basic_QA","NDSI",1);

var landuse = waterMasking();

var maskVis = {
  max: 0.05,
  min: -0.05,
  palette: ['red', 'white','blue'],
  opacity: 1,
};

var blackSkyAlbedoVis = {
  palatte: ['red','yellow','green','blue'],
  max: 0.4,
  min: 0,
  opacity: 1,
};

var velVis = {
  max: 0.038,
  min: 0.0,
  palette: ['green','53713d','e4c7af','tan'],
  opacity: 1,
};

function maskApplierEarly(image){
  image= image.updateMask(landuse);
  return image;
}
function maskApplierLate(image){
  image= image.updateMask(landuse);
  return image;
}
function snowApplier(image){
  image.updateMask(image.select('snow_mask'));
  return image;
}
omega_early=omega_early.map(maskApplierEarly);
f_iso_early=f_iso_early.map(maskApplierEarly);
omega_late=omega_late.map(maskApplierLate);
f_iso_late=f_iso_late.map(maskApplierLate);

var jointedAlbedo_early = f_iso_early.combine(omega_early);
var jointedAlbedo_late = f_iso_late.combine(omega_late);
var jointedAlbedo_early = jointedAlbedo_early.combine(snow_early);
var jointedAlbedo_late = jointedAlbedo_late.combine(snow_late);
jointedAlbedo_late = jointedAlbedo_late.map(snowApplier).select('qa_BRDF_Albedo_Parameters_Band1_iso','qa_Albedo_BSA_Band1');
jointedAlbedo_early = jointedAlbedo_early.map(snowApplier).select('qa_BRDF_Albedo_Parameters_Band1_iso','qa_Albedo_BSA_Band1');

function omega_n_calc(image){
  return image.expression(
    '(1-omega)/f_iso',{
      'omega':image.select('qa_Albedo_BSA_Band1'),
      'f_iso':image.select('qa_BRDF_Albedo_Parameters_Band1_iso')
      
    }).rename('omega_n');
    
}
function omega_ns_calc(image){
  return image.expression(
    '(((c-d)*(omega_n-35))/-35)+d',{
      'c':0.0001,
      'd':0.1,
      'omega_n':image.select('omega_n')
    }).rename('omega_ns');
}
function u_ns_calc(image){
  var inner = image.expression(
    '0.0311*(exp**((-1.0*omega_ns**1.131)/0.016)+0.007)',{
      'omega_ns':image.select('omega_ns'),
      'exp':2.718281
    });
    return inner.rename('u_ns');
}

jointedAlbedo_early = jointedAlbedo_early.map(omega_n_calc);
jointedAlbedo_early = jointedAlbedo_early.map(omega_ns_calc);
jointedAlbedo_early = jointedAlbedo_early.map(u_ns_calc);
jointedAlbedo_early = jointedAlbedo_early.median();

jointedAlbedo_late = jointedAlbedo_late.map(omega_n_calc);
jointedAlbedo_late = jointedAlbedo_late.map(omega_ns_calc);
jointedAlbedo_late = jointedAlbedo_late.map(u_ns_calc);
jointedAlbedo_late = jointedAlbedo_late.median();

var change = jointedAlbedo_early.subtract(jointedAlbedo_late);
print(change);
Map.addLayer(change,maskVis,'Change in Friction');
//Map.addLayer(A3test, blackSkyAlbedoVis, 'A3');
//Map.addLayer(A1test, blackSkyAlbedoVis, 'A1');
//Map.addLayer(domain, {color: 'blue'}, 'Domain');
//Map.addLayer(blackSkyAlbedo, blackSkyAlbedoVis, 'Black Sky');

//Map.addLayer(jointedAlbedo.first(),velVis,'Wind Friction Speed');
//Export.image.toDrive(jointedAlbedo,domain);
