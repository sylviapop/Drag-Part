

// global variables that are used to update names & values in map functions
var qa_name = "BRDF_Albedo_Band_Mandatory_Quality_Band1";
var band_name = "Albedo_BSA_Band1";
var a = 0.001; // set to 1 if no scaling needed
var qa_snow_name = "NDSI_Snow_Cover_Basic_QA";
var snow_name = "NDSI_Snow_Cover";
var snow_t = 10;


// load the domain as global varible since it's used extensively 
var domainShapeFile = 'projects/gee-project-sylvia/assets/test_domain';
var domain = ee.FeatureCollection(domainShapeFile);


// really bad function that updates the band names because the google earth engine map function won't allow
// me to update the band names within the mapping functions.... so we do some sketchy things instead
function bandNameUpdate(qaBand,normalBand)
{
  qa_name = qaBand;
  band_name = normalBand;
}


// updates the scaling factor if needed
function scalingFactorUpdate(scale)
{
  a = scale;
}

// scales images .. note that you should update the scaling factor before using this
function scaler(image){
  return image.multiply(a);
}
// bitwise extraction function in ee from https://spatialthoughts.com/2021/08/19/qa-bands-bitmasks-gee/
var bitwiseExtract = function(input, fromBit, toBit) {
  var maskSize = ee.Number(1).add(toBit).subtract(fromBit);
  var mask = ee.Number(1).leftShift(maskSize).subtract(1);
  return input.rightShift(fromBit).bitwiseAnd(mask);
};


// QA function that only works on band1 from both of these datasets other sats will require other QA functions
function qa(image){
  var qaBand = image.select(qa_name);
  var qaMask = bitwiseExtract(qaBand, 0, 1).eq(0);
  var band = image.select(band_name).updateMask(qaMask).rename('qa_'+band_name);
  return image.addBands(band);
}

//QA function for snow data masks for ocean,night and ok data
function qaSnow(image){
  var qaMask = image.expression(
    // includes good,best and ok data
    '(QA == 0) || (QA == 1)|| (QA == 2)', {
      'QA': image.select(qa_snow_name),
    });

  var band = image.select(snow_name).updateMask(qaMask).rename('qa_'+band_name);
  return band;
  
  
}

function snowmasking(image){
  var valueMask = image.expression(
    'thres < value',{
      'thres':image.select('qa_'+snow_name),
      'value':snow_t
      
    })
    return valueMask.rename('snow mask')
}

// function that calls a collection using imageCollectionLoc, filters based on start
// and end dates as well as the shapefile input
// then masks the image collection to that shapefile
var CollectionFilter = function(imageCollectionLoc,filteringShape,startDate,EndDate)
{
  var imageGroup = ee.ImageCollection(imageCollectionLoc);
  var filtered = imageGroup.filter(ee.Filter.date(startDate,EndDate)).filter(ee.Filter.bounds(filteringShape));
  var masked = filtered.map(function(image){return image.clip(domain)});  
  return masked;
  //return filtered
};



// pulls all the functions into a single thing that is callible
function helperFunction(collection,filtering,start,end,qaBand,band,scale){
  var filtered_collection = CollectionFilter(collection,filtering,start,end);
  bandNameUpdate(qaBand,band);
  scalingFactorUpdate(scale);
  var qaedCollection = filtered_collection.map(qa);
  var scaled_collection = qaedCollection.map(scaler);
  return qaedCollection;
  
}
function SnowHelperFunction(collection,filtering,start,end,qaBand,band,scale){
  var filtered_collection = CollectionFilter(collection,filtering,start,end);
  bandNameUpdate(qaBand,band);
  scalingFactorUpdate(scale);
  var qaedCollection = filtered_collection.map(qaSnow);
  var snowmask = qaedCollection.map(snowmasking);
  return snowmask;
  
}

function snowMaskapplier(image){
  
}



// testing the functions on the two datasets
//var A3test = helperFunction("MODIS/061/MCD43A3",domain,
//"2020-01-01","2021-01-01","BRDF_Albedo_Band_Mandatory_Quality_Band1","Albedo_BSA_Band1",0.001);

//var image =A3test.median();
//var blackSkyAlbedo = scaler(image.select('qa_Albedo_BSA_Band1'));



var A1test= helperFunction("MODIS/061/MCD43A1",domain,
"2020-01-01","2021-01-01","BRDF_Albedo_Band_Mandatory_Quality_Band1","BRDF_Albedo_Parameters_Band1_iso",0.001);
var image = A1test.first();
var A1BDRF = scaler(image.select('qa_BRDF_Albedo_Parameters_Band1_iso'));

var snow =  SnowHelperFunction("MODIS/061/MOD10A1",domain,
"2020-01-01","2021-01-01","NDSI_Snow_Cover_Basic_QA","NDSI_Snow_Cover",1);

var snow_aqua =  SnowHelperFunction("MODIS/061/MOD10A1",domain,
"2020-01-01","2021-01-01","NDSI_Snow_Cover_Basic_QA","NDSI_Snow_Cover",1);

var maskVis = {
  gamma: 1,
  max: 1.0,
  min: 0.0,
  opacity: 1,
};

var blackSkyAlbedoVis = {
  gamma: 1,
  max: 0.373,
  min: 0.002,
  opacity: 1,
};
var snowbands =snow.first().bandNames();
A1test = A1test.linkCollection(snow,snowbands);
print(A1test)
Map.addLayer(snow.first(),maskVis,'Terra');
Map.addLayer(snow_aqua.first(),maskVis,'Aqua');
Map.addLayer(A1BDRF.updateMask(snow.first()), blackSkyAlbedoVis, 'iso_mask');
Map.addLayer(A1BDRF, blackSkyAlbedoVis, 'iso');
//Map.addLayer(domain, {color: 'blue'}, 'Domain');
//Map.addLayer(blackSkyAlbedo, blackSkyAlbedoVis, 'Black Sky');

print(domain.first().geometry().area());
//var pixel_diff = snow_count.map(function(image){return image.subract(band_test);});
var chart = ui.Chart.image.series({
  imageCollection:snow.select('snow mask'),
  region: domain,
  reducer: ee.Reducer.count(),
  scale: 500,
  xProperty:'system:index'
}).setOptions({
      lineWidth: 1,
      pointSize: 2,
      title: 'BRDF Not Missing',
      interpolateNulls: true,
      vAxis: {title: 'Number of Pixels'},
      hAxis: {title: '', format: 'YY-MM'}
    });
    print(chart)